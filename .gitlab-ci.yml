# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Android.gitlab-ci.yml

# Read more about this script on this blog post https://about.gitlab.com/2018/10/24/setting-up-gitlab-ci-for-android-projects/, by Jason Lenny
# If you are interested in using Android with FastLane for publishing take a look at the Android-Fastlane template.

image: openjdk:11-jdk

variables:
  ANDROID_COMPILE_SDK: "32"
  ANDROID_BUILD_TOOLS: "32.1.0-rc1"
  ANDROID_SDK_TOOLS: "7583922"

# Packages installation before running script
before_script:
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1

  # Setup path as ANDROID_SDK_ROOT for moving/exporting the downloaded sdk into it
  - export ANDROID_SDK_ROOT="${PWD}/android-home"
  # Create a new directory at specified location
  - install -d $ANDROID_SDK_ROOT
  # Here we are installing androidSDK tools from official source,
  # (the key thing here is the url from where you are downloading these sdk tool for command line, so please do note this url pattern there and here as well)
  # after that unzipping those tools and
  # then running a series of SDK manager commands to install necessary android SDK packages that'll allow the app to build
  - wget --output-document=$ANDROID_SDK_ROOT/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
  # move to the archive at ANDROID_SDK_ROOT
  - pushd $ANDROID_SDK_ROOT
  - unzip -d cmdline-tools cmdline-tools.zip
  - pushd cmdline-tools
  # since commandline tools version 7583922 the root folder is named "cmdline-tools" so we rename it if necessary
  - mv cmdline-tools tools || true
  - popd
  - popd
  - export PATH=$PATH:${ANDROID_SDK_ROOT}/cmdline-tools/tools/bin/

  # Nothing fancy here, just checking sdkManager version
  - sdkmanager --version

  # use yes to accept all licenses
  - yes | sdkmanager --licenses || true
  - sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}"
  - sdkmanager "platform-tools"
  - sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}"

  # Not necessary, but just for surity
  - chmod +x ./gradlew


stages:
  - build_release_android

build_release_android:
  stage: build_release_android
  script:
#    - mkdir /PlayJson #make temp directory named PlayJson in root of project
#    - "echo $PLAY_STORE_JSON > /PlayJson/play-store-key.json" # copy git variable value to play-store-key.json file
    - ./gradlew tasks # command to publish app on play store
    - "echo gradlew publishApkRelease"
  only:
    - main #set trigger for CICD if push or merge in master branch
  artifacts:
    paths:
      - ./app/build/outputs/ # set artifact path which store your APK file



#image: openjdk:11-jdk #Defining the Docker Image
#
#variables:
#  ANDROID_COMPILE_SDK: "32" #set compile SDK version
#  ANDROID_BUILD_TOOLS: "32.1.0-rc1" #set build tool version
#  ANDROID_SDK_TOOLS:   "4333796" #set SDK tool build number you can find yous here https://developer.android.com/studio/releases/sdk-tools
#
#before_script:
#  #Installing Packages
#  - apt-get --quiet update --yes
#  - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1
#
#  #Installing the Android SDK
#  - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip
#  - unzip -d android-sdk-linux android-sdk.zip
#  - echo y | android-sdk-linux/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
#  - echo y | android-sdk-linux/tools/bin/sdkmanager "platform-tools" >/dev/null
#  - echo y | android-sdk-linux/tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
#
#  #Setting up the environment variable
#  - export ANDROID_HOME=$PWD/android-sdk-linux
#  - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
#  - chmod +x ./gradlew #set executable permission
#
#  # temporarily disable checking for EPIPE error and use yes to accept all licenses
#  - set +o pipefail
#  - yes | android-sdk-linux/tools/bin/sdkmanager --licenses # accept SDK licences
#  - set -o pipefail
## - build_release_android
#stages:
#  - build_release_android
#
#build_release_android:
#  stage: build_release_android
#  script:
#    - mkdir /PlayJson #make temp directory named PlayJson in root of project
#    - "echo $PLAY_STORE_JSON > /PlayJson/play-store-key.json" # copy git variable value to play-store-key.json file
#    - ./gradlew publishApkRelease # command to publish app on play store
#    - "echo gradlew publishApkRelease"
#  only:
#    - main #set trigger for CICD if push or merge in master branch
#  artifacts:
#    paths:
#      - ./app/build/outputs/ # set artifact path which store your APK file